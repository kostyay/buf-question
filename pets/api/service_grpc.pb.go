// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PetsClient is the client API for Pets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetsClient interface {
	// Sends a greeting
	CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*CreatePetResponse, error)
}

type petsClient struct {
	cc grpc.ClientConnInterface
}

func NewPetsClient(cc grpc.ClientConnInterface) PetsClient {
	return &petsClient{cc}
}

func (c *petsClient) CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*CreatePetResponse, error) {
	out := new(CreatePetResponse)
	err := c.cc.Invoke(ctx, "/k.pets.Pets/CreatePet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetsServer is the server API for Pets service.
// All implementations should embed UnimplementedPetsServer
// for forward compatibility
type PetsServer interface {
	// Sends a greeting
	CreatePet(context.Context, *CreatePetRequest) (*CreatePetResponse, error)
}

// UnimplementedPetsServer should be embedded to have forward compatible implementations.
type UnimplementedPetsServer struct {
}

func (UnimplementedPetsServer) CreatePet(context.Context, *CreatePetRequest) (*CreatePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePet not implemented")
}

// UnsafePetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetsServer will
// result in compilation errors.
type UnsafePetsServer interface {
	mustEmbedUnimplementedPetsServer()
}

func RegisterPetsServer(s grpc.ServiceRegistrar, srv PetsServer) {
	s.RegisterService(&Pets_ServiceDesc, srv)
}

func _Pets_CreatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetsServer).CreatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k.pets.Pets/CreatePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetsServer).CreatePet(ctx, req.(*CreatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pets_ServiceDesc is the grpc.ServiceDesc for Pets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k.pets.Pets",
	HandlerType: (*PetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePet",
			Handler:    _Pets_CreatePet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
